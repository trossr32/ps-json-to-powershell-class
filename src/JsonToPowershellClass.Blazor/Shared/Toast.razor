@using JsonToPowershellClass.Blazor.Services
@inject ToastService ToastSvc
@implements IDisposable

<div class="absolute w-full h-full bg-light-grey/40 dark:bg-black/30 z-[998] @Display" @onclick="HideToast">
    <div class="p-1.5 z-[999] w-full lg:w-1/2 mx-auto mt-64 rounded-xl @Alert" @onclick="HideToast">
        <div class="flex flex-col justify-center p-4 font-medium">
            <span class="material-symbols-rounded">
                @_iconCssClass
            </span>
        </div>
        <div class="flex flex-1 grow pl-4 h-14">
            <div class="my-auto">
                @if (!string.IsNullOrWhiteSpace(_detail))
                {
                    <p>@_message</p>
                    <p mb-0>@_detail</p>
                }
                else
                {
                    <p mb-0>@_message</p>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private string _message;
    private string _detail;
    private bool _isVisible;
    private string _backgroundCssClass;
    private string _iconCssClass;
    private string Display => _isVisible ? "block" : "hidden";
    private string Alert => _isVisible ? $"flex flex-row animate-fadeIn {_backgroundCssClass}" : null;

    protected override void OnInitialized()
    {
        ToastSvc.OnShow += ShowToast;
        ToastSvc.OnHide += HideToast;
    }

    private void ShowToast(string message, string detail, ToastLevel level)
    {
        BuildToastSettings(level, message, detail);
        
        _isVisible = true;

        StateHasChanged();
    }

    private void HideToast()
    {
        _isVisible = false;

        StateHasChanged();
    }

    private void BuildToastSettings(ToastLevel level, string message, string detail)
    {
        _backgroundCssClass = level switch
        {
            ToastLevel.Info => "bg-secondary",
            ToastLevel.Success => "bg-light-green",
            ToastLevel.Warning => "bg-warning",
            ToastLevel.Error => "bg-error",
            _ => throw new ArgumentOutOfRangeException(nameof(level), level, null)
            };

        _iconCssClass = level switch
        {
            ToastLevel.Info => "info",
            ToastLevel.Success => "task_alt",
            ToastLevel.Warning => "warning",
            ToastLevel.Error => "report",
            _ => throw new ArgumentOutOfRangeException(nameof(level), level, null)
            };

        _message = message;
        _detail = detail;
    }

    /// <inheritdoc/>
    public void Dispose()
    {
        ToastSvc.OnShow -= ShowToast;
        ToastSvc.OnHide -= HideToast;

        GC.SuppressFinalize(this);
    }
}