@page "/"
@using Newtonsoft.Json
@using System.Text
@using SoloX.BlazorJsBlob
@using System.Net.Http.Headers
@using JsonToPowershellClass.Blazor.Services
@using JsonToPowershellClass.Core.Constants
@using Newtonsoft.Json.Linq
@layout MainLayout
@inject IJsonClassGeneratorService JsonClassGeneratorSvc
@inject IBlobService BlobSvc
@inject ToastService ToastSvc
@inject LoaderService LoaderSvc
@inject IJSRuntime JsRuntime

<div id="main" class="relative">
    <div>
        <div class="lg:container lg:mx-auto flex flex-col items-center pt-4 pb-1">
            <div class="w-full max-w-screen-2xl md:w-full">
                <div class="w-full rounded-lg bg-light-grey/60 dark:bg-black/20 shadow-xl mb-10 items-center">
                    <div class="py-4 text-center items-center">
                        <div class="mx-auto w-fit">
                            <div class="float-left">
                                <img src="img/powershell.json.logo-1024x1024.png" class="w-9 sm:w-10 lg:w-12" alt="logo image"/>
                            </div>
                            <div class="float-left mt-1 ml-4">
                                <h1 class="font-header text-xl sm:text-2xl lg:text-3xl font-medium text-dark-green dark:text-white">
                                    Generate Powershell classes from JSON
                                </h1>
                            </div>
                            <div class="clear-both"></div>
                        </div>
                    </div>

                    <div class="py-1 md:pb-10 pt-4 pl-6 border-t-2 border-light-grey dark:border-dark-grey">
                        <div class="md:flex">
                            <div class="flex flex-col w-full md:w-1/2 md:pl-4 justify-center md:justify-start items-center md:items-start">
                                <div>
                                    <input type="text" @bind="_model.ClassName" placeholder="Class Name"
                                           class="w-80 block appearance-none md:max-w-xs py-1 px-2 mb-1 text-base leading-normal dark:bg-dark-grey text-gray-800 border-light-green/50 focus:ring-light-green rounded"/>
                                    <div class="justify-start">
                                        <div>
                                            <input type="checkbox" @bind="_model.Pascal" name="pascal" id="pascal"
                                                   class="bg-light-green text-light-green border-0 rounded-md focus:ring-0 focus:ring-light-grey mb-0.5"/>
                                            <label for="pascal" class="ml-1">
                                                Pascal case
                                            </label>
                                        </div>
                                        <div>
                                            <input type="checkbox" @bind="_model.AddExampleFunctions" name="add-example-functions" id="add-example-functions"
                                                   class="bg-light-green text-light-green border-0 rounded-md focus:ring-0 focus:ring-light-grey mb-0.5"/>
                                            <label for="add-example-functions" class="ml-1">
                                                Add example Powershell usage functions
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="flex flex-col w-full md:w-1/2 md:pl-4 justify-center md:justify-start items-center md:items-start">
                                <div class="mt-2 md:mt-0">
                                    <input type="text" @bind="_model.Url" placeholder="URL"
                                           class="w-80 block appearance-none md:max-w-xs py-1 px-2 mb-1 text-base leading-normal dark:bg-dark-grey text-gray-800 focus:ring-light-green focus:shadow-outline border-light-green/50 rounded" />
                                    <div class="py-2 w-full md:max-w-xs">
                                        <button type="button" @onclick="@GenerateClassFromUrlClick"
                                                class="font-bold rounded py-2 px-6 no-underline bg-light-green text-white transition-scale-hover-sm">
                                            Generate class from URL
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="md:flex gap-x-0.5">
                        <div class="w-full md:w-1/2 relative">
                            <CodeMirror6Wrapper @bind-Text="@_model.Json" Language="json"/>
                            
                            <button type="button" @onclick="@InvokeClickInputFileEvent">
                                <div class="absolute top-1.5 right-4 md:right-1.5 rounded-full bg-light-grey dark:bg-dark-grey bg-opacity-70 flex items-center justify-center h-10 w-10 dark:text-light-grey dark:hover:text-light-green border border-black dark:border-none shadow-xl transition-scale-hover-md">
                                    <Tooltip Text="Upload JSON file">
                                        <div class="p-2">
                                            <span class="material-symbols-rounded leading-[inherit]">
                                                upload
                                            </span>
                                        </div>
                                    </Tooltip>
                                </div>
                            </button>

                            <InputFile id="UploadJSON" OnChange="@InputFileChanged" class="invisible" accept=".txt,.json"></InputFile>
                        </div>
                        <div class="w-full md:w-1/2 relative">
                            <CodeMirror6Wrapper @bind-Text="@_codeObjects" Language="powershell"/>

                            @if (!string.IsNullOrWhiteSpace(_codeObjects))
                            {
                                <button type="button" @onclick="@DownloadPs1Click">
                                    <div class="absolute top-1.5 right-13 md:right-13 rounded-full bg-light-grey dark:bg-dark-grey bg-opacity-70 flex items-center justify-center h-10 w-10 dark:text-light-grey dark:hover:text-light-green border border-black dark:border-none shadow-xl transition-scale-hover-md">
                                        <Tooltip Text="Download as ps1">
                                            <div class="p-2">
                                                <span class="material-symbols-rounded leading-[inherit]">
                                                    download
                                                </span>
                                            </div>
                                        </Tooltip>
                                    </div>
                                </button>

                                <button type="button" @onclick="@CopyTextToClipboardClick">
                                    <div class="absolute top-1.5 right-4 md:right-1.5 rounded-full bg-light-grey dark:bg-dark-grey bg-opacity-70 flex items-center justify-center h-10 w-10 dark:text-light-grey dark:hover:text-light-green border border-black dark:border-none shadow-xl transition-scale-hover-md">
                                        <Tooltip Text="Copy to clipboard">
                                            <div class="p-2">
                                                <span class="material-symbols-rounded leading-[inherit]">
                                                    assignment_add
                                                </span>
                                            </div>
                                        </Tooltip>
                                    </div>
                                </button>
                            }
                        </div>
                    </div>

                    <div class="py-2 justify-center text-center">
                        <div>
                            <button type="button" @onclick="@GenerateClassClick"
                                    class="font-bold rounded py-2 px-6 no-underline bg-light-green text-white transition-scale-hover-sm">
                                Generate class
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <About></About>

        <Footer></Footer>
    </div>
</div>

@code {
    private readonly InputFormModel _model = new();
    private string _codeObjects = Constants.PowershellCommentAppDescription;
    private string _tempJson;

    protected override async Task OnInitializedAsync()
    {
        LoaderSvc.ShowLoader();

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        await Task.Delay(1);

        LoaderSvc.HideLoader();
    }

    /// <summary>
    /// Generate class click event handler
    /// </summary>
    /// <returns></returns>
    private void GenerateClassClick()
    {
        if (string.IsNullOrWhiteSpace(_model.ClassName))
            _model.ClassName = "RootObject";

        try
        {
            _tempJson ??= _model.Json.Trim();

            if (ValidateAndFormatJson())
            {
                _model.Json = _tempJson;

                _codeObjects = " ";
                _codeObjects = JsonClassGeneratorSvc.GenerateClasses(_model);
            }
        }
        catch (Exception)
        {
            ToastSvc.ShowError("Class generation failed");
        }

        _tempJson = null;
    }
    
    /// <summary>
    /// Generate class from URL click event handler
    /// </summary>
    /// <returns></returns>
    private async Task GenerateClassFromUrlClick()
    {
        if (!_model.Url.IsValidUrl())
        {
            ToastSvc.ShowWarning("The supplied URL is not a valid format, please change and retry");

            return;
        }

        try
        {
            _tempJson = (await _model.Url.GetStringAsync()).Trim();

            GenerateClassClick();
        }
        catch (FlurlHttpException fhe)
        {
            if (fhe is FlurlHttpTimeoutException)
            {
                ToastSvc.ShowError("Request to the supplied URL timed out");

                return;
            }

            ToastSvc.ShowError("The supplied URL returns an invalid response", fhe.Message);
        }
        catch (Exception)
        {
            ToastSvc.ShowError("An unknown error occurred when retrieving or parsing the supplied API data");
        }
    }

    /// <summary>
    /// Fire the InputFileChanged on the hidden input file control
    /// </summary>
    /// <returns></returns>
    private async Task InvokeClickInputFileEvent() => 
        await JsRuntime.InvokeVoidAsync("clickUploadJson");

    /// <summary>
    /// Input file changed event handler (JSON file upload)
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    private async Task InputFileChanged(InputFileChangeEventArgs e)
    {
        try
        {
            var fileContent = new StreamContent(e.File.OpenReadStream(Constants.MaxFileSize));

            fileContent.Headers.ContentType = new MediaTypeHeaderValue(e.File.ContentType);

            _tempJson = (await fileContent.ReadAsStringAsync()).Trim();

            GenerateClassClick();
        }
        catch (IOException)
        {
            ToastSvc.ShowWarning("File uploads are limited to 50 Mb, please reduce the file size and retry");
        }
        catch (Exception)
        {
            ToastSvc.ShowError("An unknown error occurred when uploading or reading the supplied file");
        }
    }

    /// <summary>
    /// Download powershell output as ps1 file
    /// </summary>
    /// <returns></returns>
    private async Task DownloadPs1Click()
    {
        if (string.IsNullOrWhiteSpace(_codeObjects.Trim()))
        {
            ToastSvc.ShowInfo("Nothing to copy! Generate some Powershell first");

            return;
        }

        try
        {
            var bytes = Encoding.UTF8.GetBytes(_codeObjects);
            var b64 = Convert.ToBase64String(bytes);
            var dataUrl = $"data:text/plain;base64,{b64}";

            await BlobSvc.SaveAsFileAsync(dataUrl, $"json2ps.{DateTime.Now:yyyyMMdd.HHmmss}.ps1");
        }
        catch (Exception)
        {
            ToastSvc.ShowError("An unknown error occurred when generating the file for download");
        }
    }

    /// <summary>
    /// Invoke javascript function to copy text to clipboard
    /// </summary>
    /// <returns></returns>
    private async Task CopyTextToClipboardClick()
    {
        try
        {
            await JsRuntime.InvokeVoidAsync("clipboardCopy.copyText", _codeObjects);

            ToastSvc.ShowSuccess("Copied to clipboard!");
        }
        catch (Exception)
        {
            ToastSvc.ShowError("An unknown error occurred when copying to clipboard");
        }
    }

    /// <summary>
    /// Validate and format JSON
    /// </summary>
    /// <returns></returns>
    private bool ValidateAndFormatJson()
    {
        try
        {
            JToken.Parse(_tempJson);
        }
        catch (JsonReaderException jre)
        {
            ToastSvc.ShowError("Invalid JSON detected, unable to convert", jre.Message);

            return false;
        }
        catch (Exception)
        {
            ToastSvc.ShowError("An unknown error occurred when validating JSON");

            return false;
        }

        try
        {
            _tempJson = JsonConvert.SerializeObject(JsonConvert.DeserializeObject(_tempJson), new JsonSerializerSettings{ Formatting = Formatting.Indented });

            return true;
        }
        catch (Exception)
        {
            ToastSvc.ShowError("Failed to format JSON, is it a valid format?");

            return false;
        }
    }
}
